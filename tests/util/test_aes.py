import unittest
import numpy as np
from sca.util import aes


class TestAes(unittest.TestCase):

    def test_full_aes_encrypt(self):
        """ Test full run of AES encryption"""

        key = np.array([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])
        plaintext = np.array([0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07,
                              0x34])
        test_aes_object = aes.AES(key)

        ciphertext = [0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b, 0x32]
        self.assertTrue(np.array_equal(test_aes_object.encrypt(plaintext), ciphertext))

    def test_full_aes_decrypt(self):
        """ Test full run of AES decryption"""

        key = np.array([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])
        plaintext = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]
        test_aes_object = aes.AES(key)

        ciphertext = np.array([0x39, 0x25, 0x84, 0x1d, 0x02, 0xdc, 0x09, 0xfb, 0xdc, 0x11, 0x85, 0x97, 0x19, 0x6a, 0x0b,
                               0x32])
        self.assertTrue(np.array_equal(test_aes_object.decrypt(ciphertext), plaintext))

    def test_first_byte(self):
        """ Test if the fifth byte in the first round gets returned properly """

        key = np.array([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])
        plaintext = np.array([0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07,
                              0x34])
        test_aes_object = aes.AES(key)
        self.assertEqual(aes.sbox[key[0] ^ plaintext[0]], test_aes_object.encrypt(plaintext, round_output=1,
                                                                                  single_byte=True))

    def test_fifth_byte(self):
        """ Test if the fifth byte in the first round gets returned properly"""
        key = np.array([0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c])
        plaintext = np.array([0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07,
                              0x34])
        test_aes_object = aes.AES(key)
        self.assertEqual(aes.sbox[key[5] ^ plaintext[5]], test_aes_object.encrypt(plaintext, round_output=1,
                                                                                  result_byte=5, single_byte=True))
